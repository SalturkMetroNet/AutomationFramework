package com.metronet.mis.test_data_generation.VES;

import com.github.javafaker.Faker;
import com.metronet.mis.pojos.Address;
import com.metronet.mis.pojos.Parameter;
import com.metronet.mis.pojos.Subscriber;
import com.metronet.mis.utilities.common.ConfigurationReader;
import com.metronet.mis.utilities.common.TableManipulation;
import com.metronet.mis.utilities.common.TimeUtilities;
import com.metronet.mis.utilities.db.DBUtilities;
import com.metronet.mis.utilities.misc.Colors;
import com.metronet.mis.utilities.ui.BrowserUtils;
import com.metronet.mis.utilities.ui.Driver;
import com.metronet.mis.utilities.ui.Pages;
import org.apache.log4j.Logger;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestRule;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * An update to GenerateNewSubscriberWithServices "now known as FESub"
 * @author salturk
 */
public class FESubv5_0 implements Colors
{
    Instant start = Instant.now();
    Instant totalStart = Instant.now();

    /**
     * Create the Logger obj to print the process to the console
     */
    private static final Logger log = Logger.getLogger(FESubv5_0.class);

    /**
     * Create the pages obj to get access to all Pages
     *
     * @see Pages
     */
    Pages pages = new Pages();

    /**
     * Create a WebDriverWait obj to be used during UI automation to ensure synchronization.
     * Passing getDriver() to get required browser.
     *
     * @see Driver
     */
    WebDriverWait wait = new WebDriverWait(Driver.getDriver(), 20);

    /**
     * Create a Faker obj to generate random data
     */
    Faker faker = new Faker();

    /**
     * Create a SimpleDateFormat to format the birthdays generated by faker obj
     */
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");

    /**
     * Create a DateTimeFormatter obj to format the localDate value
     */
    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");

    /**
     * Create a LocalDate obj which holds the value of tomorrow to be used as install date
     */
    LocalDate localDate = LocalDate.now().plusDays(1);

    /**
     * Create a Parameter obj which holds the inputs needed for services. It uses getParameters() method of TableManipulation
     * @see Parameter
     * @see TableManipulation
     * @see ConfigurationReader
     */
    Parameter parameter = TableManipulation.getParameters(ConfigurationReader.getProperty("parameterforves"));
            //.getParameterMap(ConfigurationReader.getProperty("parameterforves"));

    /**
     * Create multiple String objs to carry customer information through script
     */
    String firstName;
    String lastName;
    String emailAddress;
    String phone;
    String dob;
    String address;
    String installDate;

    /**
     * create a int variables and assign the iteration limit from config file
     */
    int batchLimit = Integer.parseInt(ConfigurationReader.getProperty("batchlimit"));

    /**
     * Creating a List holding Address objs to be used in script. calling getData() of DBUtilities to get the list.
     * @see Address
     * @see DBUtilities
     */
    List<Address> listOfAddress;

    {
        try
        {
            listOfAddress = DBUtilities.getData();
        }
        catch (SQLException throwables)
        {
            throwables.printStackTrace();
        }
    }

    /**
     * create a subscriber obj to be used in the script and to carry the information in a organized manner
     * @see Subscriber
     */
    Subscriber subscriber;

    /**
     * an int variable to count how many subs have been created during the script
     */
    int subCount = 0;

    @Rule
    public final TestRule watchman = new TestWatcher()
    {
        @Override
        protected void failed(Throwable e, Description description)
        {
            log.error(description.getDisplayName() + " " + e.getClass().getSimpleName() + "\n");
            try
            {
                BrowserUtils.takeAScreenshotAndSave("fesubv5_0()");
            }
            catch (Exception z)
            {
                z.printStackTrace();
            }
        }

        @Override
        protected void finished(Description description)
        {
            Driver.closeDriver();
        }
    };

    @Test
    public void fesubv5_0()
    {

            log.info(ANSI_CYAN+"**** FESub v4.0 ****"+ANSI_RESET);

            //go to VES test env and assert you are on expected page
            String vesTestEnv = ConfigurationReader.getProperty("url");
            Driver.getDriver().get(vesTestEnv);
            BrowserUtils.impWait(20);
            String actualUrl = Driver.getDriver().getCurrentUrl();
            assertEquals(vesTestEnv, actualUrl);
            log.info(ANSI_GREEN+"Check URL -> Pass!"+ANSI_RESET);

            //call login() method of LoginPageVES and logs into VES Test ENV also asserts that you are on correct page
            pages.getLoginPageVES().login();
            BrowserUtils.impWait(20);
            assertTrue(pages.getSearchPageVES().newPageButton.isDisplayed());
            log.info(ANSI_GREEN+"Log in -> Pass!"+ANSI_RESET);

            //go to required page and assert
            pages.getSearchPageVES().newPageButton.click();
            BrowserUtils.impWait(20);
            assertTrue(pages.getNewPageVES().firstNameTextBox.isDisplayed());
            log.info(ANSI_GREEN+"Navigate to NEW-> Pass!"+ANSI_RESET);
            Instant end = Instant.now();

            log.info(ANSI_CYAN+"**** Set Up Completed ****"+ANSI_RESET);
            log.info(ANSI_YELLOW+"Startup time: "+ TimeUtilities.formatDuration(Duration.between(start, end)) +ANSI_RESET);

            Instant subStart;
            Instant subEnd;
            for (int i = 1; i < batchLimit+1; i++)
            {
                subStart = Instant.now();

                //Randomly generate data and assign them to necessary variables to be used in the script
                firstName = faker.name().firstName();
                lastName = faker.name().lastName();
                emailAddress = faker.internet().emailAddress();
                phone = faker.numerify("###-###-####");
                dob = simpleDateFormat.format(faker.date().birthday());
                address = listOfAddress.get(i).getStreet().trim() + ", " + listOfAddress.get(i).getCity().trim();
                installDate = dateTimeFormatter.format(localDate);
                subscriber = new Subscriber(firstName, lastName, emailAddress, phone, dob, address);

                //call upon different methods that are special to the pages to continue the script
                pages.getNewPageVES().fillForm(subscriber);
                log.info(ANSI_GREEN+"Step 1: Fill New Form -> PASS!"+ANSI_RESET);

                pages.getServicesPageVES().chooseServicesWithParameters(parameter);
                log.info(parameter.toString());
                log.info(ANSI_GREEN+"Step 2: Choose Services -> PASS!"+ANSI_RESET);

                pages.getReviewOrderPageVES().fillOutReviewOrderInputs(installDate, 1, installDate, 4, "FESub v5.0");
                log.info(ANSI_GREEN+"Step 3: Fill Order Details -> PASS!"+ANSI_RESET);

                //store new information on subscriber obj then write it to an excel table
                subscriber = pages.getOrderSummaryPageVES().getCustomerInformation(subscriber);
                subCount++;
                TableManipulation.writeSubToExcel(subscriber);
                log.info(ANSI_GREEN+"Step 4: Store New Subscriber -> PASS!"+ANSI_RESET);

                subEnd = Instant.now();

                log.info(ANSI_CYAN+"Sub Creation Ended"+ANSI_RESET+"\n");
                log.info(ANSI_YELLOW+"Sub Creation time: "+ TimeUtilities.formatDuration(Duration.between(subStart, subEnd))+ANSI_RESET);
                log.info("Current Sub Count: "+subCount+"\n");

                wait.until(ExpectedConditions.invisibilityOf(pages.getOrderSummaryPageVES().loadingOverlay));
                pages.getOrderSummaryPageVES().navigateToNewLink.click();

                BrowserUtils.impWait(20);

            }

            log.info(ANSI_CYAN+"**** FESub v4.0 Ended ****"+ANSI_RESET);

            Driver.getDriver().close();
            log.info(ANSI_CYAN+"**** Tear Down Completed ****"+ANSI_RESET);
            Instant totalEnd = Instant.now();

            log.info(ANSI_YELLOW+"Total Run Time: "+TimeUtilities.formatDuration(Duration.between(totalStart, totalEnd))+ANSI_RESET);
            log.info("Created Subscribers -> "+subCount);
            log.info("Total Subscribers in Excel File -> "+TableManipulation.getRowCount("subinfo"));


    }
}
